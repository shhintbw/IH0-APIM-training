<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-query-parameter name="x-product-name" exists-action="override">
			<value>@(context.Product?.Name ?? "none")</value>
		</set-query-parameter>
		<set-header name="x-request-context-data" exists-action="override">
			<value>@(context.Deployment.Region)</value>
		</set-header>
		<set-header name="x-request-received-time" exists-action="override">
			<value>{{TimeNow}}</value>
		</set-header>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<xml-to-json kind="direct" apply="always" consider-accept-header="false" />
		<set-header name="x-aspnet-version" exists-action="delete" />
		<set-header name="x-powered-by" exists-action="delete" />
		<xml-to-json kind="direct" apply="always" consider-accept-header="false" />
		<set-header name="x-aspnet-version" exists-action="delete" />
		<set-header name="x-powered-by" exists-action="delete" />
		<choose>
			<when condition="@(context.Response.StatusCode == 200)">
				<send-one-way-request mode="new">
					<set-url>https://webhook.site/42ac326b-a2d9-47f6-a37f-cb1b486cc9a1</set-url>
					<set-method>POST</set-method>
					<set-body>@{
      return new JObject(
        new JProperty("@type","MessageCard"),
        new JProperty("@context", "http://schema.org/extensions"),
        new JProperty("summary","Summary"),
        new JProperty("themeColor", "0075FF"),
        new JProperty("sections",
          new JArray (
            new JObject (
              new JProperty("text", "Hello!")
            )
          )
        )
      ).ToString();
    }</set-body>
				</send-one-way-request>
			</when>
		</choose>
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>